{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMQySTurJoHQEfgispAuq/H"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report, roc_curve, roc_auc_score, precision_recall_curve, auc\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import train_test_split, KFold, cross_val_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import balanced_accuracy_score\n",
        "\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "bHqzR9DQUnRN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Carregar dados\n",
        "dados = pd.read_csv('a1-in.csv', sep=',')\n",
        "dados.head(15)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 557
        },
        "id": "sp1-LmizUqQI",
        "outputId": "ec091195-4618-4770-874f-4570c6e24993"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    UNIQUEID SCHOOL Class  GRADE CODER  STUDENTID  Gender  OBSNUM  \\\n",
              "0      14400      B   T9Q      0     Z     600865       0       1   \n",
              "1      14401      B   T9Q      0     Z     596466       0       1   \n",
              "2      14402      B   T9Q      0     Z     616590       0       1   \n",
              "3      14403      B   T9Q      0     Z     734358       1       1   \n",
              "4      14404      B   T9Q      0     Z     826308       1       1   \n",
              "5      14405      B   T9Q      0     Z     983650       0       1   \n",
              "6      14406      B   T9Q      0     Z     400753       1       1   \n",
              "7      14407      B   T9Q      0     Z     483575       1       1   \n",
              "8      14408      B   T9Q      0     Z     638337       0       1   \n",
              "9      14409      B   T9Q      0     Z     744115       1       1   \n",
              "10     14410      B   T9Q      0     Z     591186       1       1   \n",
              "11     14411      B   T9Q      0     Z     180353       1       1   \n",
              "12     14412      B   T9Q      0     Z     138745       0       1   \n",
              "13     14413      B   T9Q      0     Z      87701       0       1   \n",
              "14     14414      B   T9Q      0     Z     187441       0       1   \n",
              "\n",
              "    totalobs-forsession     Activity ONTASK  TRANSITIONS  NumACTIVITIES  \\\n",
              "0                     0  Wholecarpet      Y            3              4   \n",
              "1                     1  Wholecarpet      Y            3              4   \n",
              "2                     2  Wholecarpet      Y            3              4   \n",
              "3                     3  Wholecarpet      Y            3              4   \n",
              "4                     4  Wholecarpet      Y            3              4   \n",
              "5                     5  Wholecarpet      Y            3              4   \n",
              "6                     6  Wholecarpet      Y            3              4   \n",
              "7                     7  Wholecarpet      Y            3              4   \n",
              "8                     8  Wholecarpet      Y            3              4   \n",
              "9                     9  Wholecarpet      N            3              4   \n",
              "10                   10  Wholecarpet      Y            3              4   \n",
              "11                   11  Wholecarpet      Y            3              4   \n",
              "12                   12  Wholecarpet      Y            3              4   \n",
              "13                   13  Wholecarpet      Y            3              4   \n",
              "14                   14  Wholecarpet      Y            3              4   \n",
              "\n",
              "    FORMATchanges  NumFORMATS  Obsv/act  Transitions/Durations  Total Time  \n",
              "0               1           2     770.5               0.004043           0  \n",
              "1               1           2     770.5               0.004043          23  \n",
              "2               1           2     770.5               0.004043          25  \n",
              "3               1           2     770.5               0.004043          27  \n",
              "4               1           2     770.5               0.004043          31  \n",
              "5               1           2     770.5               0.004043          34  \n",
              "6               1           2     770.5               0.004043          43  \n",
              "7               1           2     770.5               0.004043          45  \n",
              "8               1           2     770.5               0.004043          52  \n",
              "9               1           2     770.5               0.004043          64  \n",
              "10              1           2     770.5               0.004043          72  \n",
              "11              1           2     770.5               0.004043          80  \n",
              "12              1           2     770.5               0.004043          99  \n",
              "13              1           2     770.5               0.004043         102  \n",
              "14              1           2     770.5               0.004043         106  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a0a283a7-9cae-476e-9ccc-4d6ab547e170\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>UNIQUEID</th>\n",
              "      <th>SCHOOL</th>\n",
              "      <th>Class</th>\n",
              "      <th>GRADE</th>\n",
              "      <th>CODER</th>\n",
              "      <th>STUDENTID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>OBSNUM</th>\n",
              "      <th>totalobs-forsession</th>\n",
              "      <th>Activity</th>\n",
              "      <th>ONTASK</th>\n",
              "      <th>TRANSITIONS</th>\n",
              "      <th>NumACTIVITIES</th>\n",
              "      <th>FORMATchanges</th>\n",
              "      <th>NumFORMATS</th>\n",
              "      <th>Obsv/act</th>\n",
              "      <th>Transitions/Durations</th>\n",
              "      <th>Total Time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>14400</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>600865</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14401</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>596466</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>14402</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>616590</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>14403</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>734358</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>14404</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>826308</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>14405</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>983650</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>14406</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>400753</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>14407</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>483575</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>14408</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>638337</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>14409</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>744115</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>N</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>14410</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>591186</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>14411</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>180353</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>14412</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>138745</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>12</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>14413</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>87701</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>102</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>14414</td>\n",
              "      <td>B</td>\n",
              "      <td>T9Q</td>\n",
              "      <td>0</td>\n",
              "      <td>Z</td>\n",
              "      <td>187441</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>14</td>\n",
              "      <td>Wholecarpet</td>\n",
              "      <td>Y</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>770.5</td>\n",
              "      <td>0.004043</td>\n",
              "      <td>106</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0a283a7-9cae-476e-9ccc-4d6ab547e170')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a0a283a7-9cae-476e-9ccc-4d6ab547e170 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a0a283a7-9cae-476e-9ccc-4d6ab547e170');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a646a8ef-410f-41cb-a065-6e588a57deb3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a646a8ef-410f-41cb-a065-6e588a57deb3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a646a8ef-410f-41cb-a065-6e588a57deb3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dados",
              "summary": "{\n  \"name\": \"dados\",\n  \"rows\": 27731,\n  \"fields\": [\n    {\n      \"column\": \"UNIQUEID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8005,\n        \"min\": 14400,\n        \"max\": 42130,\n        \"num_unique_values\": 27731,\n        \"samples\": [\n          21312,\n          38319,\n          27871\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCHOOL\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"A\",\n          \"C\",\n          \"D\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 22,\n        \"samples\": [\n          \"T9Q\",\n          \"T6Q\",\n          \"T8VQ\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GRADE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CODER\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Y\",\n          \"Z\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUDENTID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 283393,\n        \"min\": 1123,\n        \"max\": 999979,\n        \"num_unique_values\": 1226,\n        \"samples\": [\n          626301,\n          150271\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OBSNUM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 32,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          30,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"totalobs-forsession\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105,\n        \"min\": 0,\n        \"max\": 511,\n        \"num_unique_values\": 512,\n        \"samples\": [\n          304,\n          495\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Activity\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Wholecarpet\",\n          \"Smallgroup\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ONTASK\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"N\",\n          \"Y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRANSITIONS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumACTIVITIES\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FORMATchanges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumFORMATS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obsv/act\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 455.25053917368786,\n        \"min\": 387.0,\n        \"max\": 2735.0,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          530.3333333,\n          770.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transitions/Durations\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.010319811542781181,\n        \"min\": 0.0,\n        \"max\": 0.666666667,\n        \"num_unique_values\": 206,\n        \"samples\": [\n          0.00191022,\n          0.009380863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 664,\n        \"min\": 0,\n        \"max\": 3554,\n        \"num_unique_values\": 2871,\n        \"samples\": [\n          676,\n          2669\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.4) Removendo valores faltantes e N/a."
      ],
      "metadata": {
        "id": "97o-oJKaGtby"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Remover instâncias com valores faltantes\n",
        "dados.dropna(inplace=True)\n",
        "\n",
        "# Remover instâncias duplicadas\n",
        "dados.drop_duplicates(inplace=True)"
      ],
      "metadata": {
        "id": "Kw8oLtpPUtOq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#virualizar descrição quantitativa dos dados\n",
        "pd.set_option('display.precision',2)\n",
        "dados.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "gmwbW1szUwZ8",
        "outputId": "cb11cc75-137a-4c99-fc08-b13a40c53c9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       UNIQUEID     GRADE  STUDENTID    Gender    OBSNUM  totalobs-forsession  \\\n",
              "count  27731.00  27731.00   27731.00  27731.00  27731.00             27731.00   \n",
              "mean   28265.00      2.06  505973.49      0.51      9.61               170.61   \n",
              "std     8005.39      1.50  283393.98      0.50      5.70               105.78   \n",
              "min    14400.00      0.00    1123.00      0.00      1.00                 0.00   \n",
              "25%    21332.50      1.00  261495.00      0.00      5.00                82.00   \n",
              "50%    28265.00      2.00  513716.00      1.00      9.00               165.00   \n",
              "75%    35197.50      4.00  742667.00      1.00     14.00               248.00   \n",
              "max    42130.00      4.00  999979.00      1.00     32.00               511.00   \n",
              "\n",
              "       TRANSITIONS  NumACTIVITIES  FORMATchanges  NumFORMATS  Obsv/act  \\\n",
              "count     27731.00       27731.00       27731.00    27731.00  27731.00   \n",
              "mean          2.38           3.38           1.54        2.54    975.09   \n",
              "std           1.32           1.32           1.23        1.23    455.25   \n",
              "min           0.00           1.00           0.00        1.00    387.00   \n",
              "25%           1.00           2.00           1.00        2.00    721.20   \n",
              "50%           2.00           3.00           1.00        2.00    876.25   \n",
              "75%           3.00           4.00           2.00        3.00   1106.75   \n",
              "max           6.00           7.00           5.00        6.00   2735.00   \n",
              "\n",
              "       Transitions/Durations  Total Time  \n",
              "count               2.77e+04    27731.00  \n",
              "mean                3.18e-03      773.01  \n",
              "std                 1.03e-02      664.98  \n",
              "min                 0.00e+00        0.00  \n",
              "25%                 8.39e-04      251.00  \n",
              "50%                 1.52e-03      586.00  \n",
              "75%                 3.26e-03     1116.00  \n",
              "max                 6.67e-01     3554.00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-66a4f016-8e1d-46ac-b735-9f2db0e3a54c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>UNIQUEID</th>\n",
              "      <th>GRADE</th>\n",
              "      <th>STUDENTID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>OBSNUM</th>\n",
              "      <th>totalobs-forsession</th>\n",
              "      <th>TRANSITIONS</th>\n",
              "      <th>NumACTIVITIES</th>\n",
              "      <th>FORMATchanges</th>\n",
              "      <th>NumFORMATS</th>\n",
              "      <th>Obsv/act</th>\n",
              "      <th>Transitions/Durations</th>\n",
              "      <th>Total Time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>27731.00</td>\n",
              "      <td>27731.00</td>\n",
              "      <td>27731.00</td>\n",
              "      <td>27731.00</td>\n",
              "      <td>27731.00</td>\n",
              "      <td>27731.00</td>\n",
              "      <td>27731.00</td>\n",
              "      <td>27731.00</td>\n",
              "      <td>27731.00</td>\n",
              "      <td>27731.00</td>\n",
              "      <td>27731.00</td>\n",
              "      <td>2.77e+04</td>\n",
              "      <td>27731.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>28265.00</td>\n",
              "      <td>2.06</td>\n",
              "      <td>505973.49</td>\n",
              "      <td>0.51</td>\n",
              "      <td>9.61</td>\n",
              "      <td>170.61</td>\n",
              "      <td>2.38</td>\n",
              "      <td>3.38</td>\n",
              "      <td>1.54</td>\n",
              "      <td>2.54</td>\n",
              "      <td>975.09</td>\n",
              "      <td>3.18e-03</td>\n",
              "      <td>773.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>8005.39</td>\n",
              "      <td>1.50</td>\n",
              "      <td>283393.98</td>\n",
              "      <td>0.50</td>\n",
              "      <td>5.70</td>\n",
              "      <td>105.78</td>\n",
              "      <td>1.32</td>\n",
              "      <td>1.32</td>\n",
              "      <td>1.23</td>\n",
              "      <td>1.23</td>\n",
              "      <td>455.25</td>\n",
              "      <td>1.03e-02</td>\n",
              "      <td>664.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>14400.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1123.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>387.00</td>\n",
              "      <td>0.00e+00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>21332.50</td>\n",
              "      <td>1.00</td>\n",
              "      <td>261495.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>5.00</td>\n",
              "      <td>82.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>721.20</td>\n",
              "      <td>8.39e-04</td>\n",
              "      <td>251.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>28265.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>513716.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>9.00</td>\n",
              "      <td>165.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>3.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>876.25</td>\n",
              "      <td>1.52e-03</td>\n",
              "      <td>586.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>35197.50</td>\n",
              "      <td>4.00</td>\n",
              "      <td>742667.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>14.00</td>\n",
              "      <td>248.00</td>\n",
              "      <td>3.00</td>\n",
              "      <td>4.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>3.00</td>\n",
              "      <td>1106.75</td>\n",
              "      <td>3.26e-03</td>\n",
              "      <td>1116.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>42130.00</td>\n",
              "      <td>4.00</td>\n",
              "      <td>999979.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>32.00</td>\n",
              "      <td>511.00</td>\n",
              "      <td>6.00</td>\n",
              "      <td>7.00</td>\n",
              "      <td>5.00</td>\n",
              "      <td>6.00</td>\n",
              "      <td>2735.00</td>\n",
              "      <td>6.67e-01</td>\n",
              "      <td>3554.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66a4f016-8e1d-46ac-b735-9f2db0e3a54c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-66a4f016-8e1d-46ac-b735-9f2db0e3a54c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-66a4f016-8e1d-46ac-b735-9f2db0e3a54c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-401f6064-95be-4742-9056-786c02bf9443\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-401f6064-95be-4742-9056-786c02bf9443')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-401f6064-95be-4742-9056-786c02bf9443 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dados\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"UNIQUEID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10936.737434813933,\n        \"min\": 8005.394493714847,\n        \"max\": 42130.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          27731.0,\n          28265.0,\n          35197.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GRADE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9803.653688154116,\n        \"min\": 0.0,\n        \"max\": 27731.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          27731.0,\n          2.0603656557643073,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUDENTID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 344281.89917538123,\n        \"min\": 1123.0,\n        \"max\": 999979.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          505973.49067830225,\n          513716.0,\n          27731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9804.18676898759,\n        \"min\": 0.0,\n        \"max\": 27731.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5056435036601638,\n          1.0,\n          0.4999771647031141\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OBSNUM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9800.539130151858,\n        \"min\": 1.0,\n        \"max\": 27731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.613356893007825,\n          9.0,\n          27731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"totalobs-forsession\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9740.806074908403,\n        \"min\": 0.0,\n        \"max\": 27731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          170.611049006527,\n          165.0,\n          27731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRANSITIONS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9803.596415374386,\n        \"min\": 0.0,\n        \"max\": 27731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.3818830911254554,\n          2.0,\n          27731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumACTIVITIES\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9803.293389373768,\n        \"min\": 1.0,\n        \"max\": 27731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.3818830911254554,\n          3.0,\n          27731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FORMATchanges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9803.794865938653,\n        \"min\": 0.0,\n        \"max\": 27731.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          27731.0,\n          1.5352132991958458,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumFORMATS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9803.49183297098,\n        \"min\": 1.0,\n        \"max\": 27731.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          27731.0,\n          2.5352132991958456,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obsv/act\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9466.431390490765,\n        \"min\": 387.0,\n        \"max\": 27731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          975.0878824885363,\n          876.25,\n          27731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transitions/Durations\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9804.354439732659,\n        \"min\": 0.0,\n        \"max\": 27731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0031811371027370087,\n          0.001520913,\n          27731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9517.111540103477,\n        \"min\": 0.0,\n        \"max\": 27731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          773.0065269914536,\n          586.0,\n          27731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.2) e 2.3) As variáveis selecionadas são importantes para entender o desempenho dos alunos em atividades educacionais. No código, as variáveis utilizadas são:\n",
        "\n",
        "GRADE: Série do aluno.\n",
        "Gender: Gênero do aluno.\n",
        "Activity: Indica se o aluno está em atividade.\n",
        "ONTASK: Outra indicação de atividade.\n",
        "NumACTIVITIES: Quantidade de atividades.\n",
        "FORMATchanges: Quantidade de mudanças de formato.\n",
        "NumFORMATS: Número de formatos.\n",
        "TRANSITIONS: Quantidade de transições.\n",
        "\n",
        "As variáveis selecionadas são relevantes para o problema de classificação, pois estão relacionadas ao desempenho dos alunos em atividades educacionais. Elas fornecem informações sobre o comportamento dos alunos durante o processo de aprendizagem, como sua participação, mudanças de formato e transições entre atividades. Portanto, faz sentido incluí-las no modelo para prever o desempenho dos alunos."
      ],
      "metadata": {
        "id": "lDLR9BgXAc1l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = dados[['GRADE','Gender','Activity','ONTASK','NumACTIVITIES','FORMATchanges', 'NumFORMATS','TRANSITIONS']]"
      ],
      "metadata": {
        "id": "M0iJdmO-_RvT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.4) Realizando one hot encoding"
      ],
      "metadata": {
        "id": "Vaii2fxUGn-7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Aplicar one-hot encoding para variáveis categóricas\n",
        "dados = pd.get_dummies(dados, columns=['Gender','ONTASK'])\n",
        "print(dados.columns)"
      ],
      "metadata": {
        "id": "J2qSI5q0VFb0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "63a4cd19-51a1-464d-c476-85a0e2668531"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['UNIQUEID', 'SCHOOL', 'Class', 'GRADE', 'CODER', 'STUDENTID', 'OBSNUM',\n",
            "       'totalobs-forsession', 'Activity', 'TRANSITIONS', 'NumACTIVITIES',\n",
            "       'FORMATchanges', 'NumFORMATS', 'Obsv/act', 'Transitions/Durations',\n",
            "       'Total Time', 'Gender_0', 'Gender_1', 'ONTASK_N', 'ONTASK_Y'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Gera um conjunto de dados sintético com make_classification\n",
        "X, Y = make_classification(n_samples=1000, n_features=10,\n",
        "                           n_informative=5, n_redundant=5, random_state=42)"
      ],
      "metadata": {
        "id": "s1D31SLYCGL-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.5) Separa os dados em conjuntos de treinamento e teste"
      ],
      "metadata": {
        "id": "9xgT-pbUGgZ9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Separa os dados em conjuntos de treinamento e teste\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=42)"
      ],
      "metadata": {
        "id": "9nPN0fUgCI9m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Preparar a normalização dos dados para modelos que se beneficiam disso\n",
        "scaler = StandardScaler().fit(X_train)\n",
        "X_train_scaled = scaler.transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "t1cSib2DDoEH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.1) Usando todos os algoritmos vistos em aula para resolver o problema de classificação binária"
      ],
      "metadata": {
        "id": "481oUAvPG_V7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Lista de modelos para avaliação\n",
        "models = [\n",
        "    ('Logistic Regression', LogisticRegression()),\n",
        "    ('Decision Tree', DecisionTreeClassifier()),\n",
        "    ('SVM', SVC())\n",
        "]"
      ],
      "metadata": {
        "id": "tbnhYphrCN4n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Preparar a normalização dos dados para modelos que se beneficiam disso\n",
        "scaler = StandardScaler().fit(X_train)\n",
        "X_train_scaled = scaler.transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "r5GY8ypdD_VF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.6) Utilizando a validação cruzada para comparar diferentes algoritmos de classificação\n",
        "2.8) Usando todas as métricas de classificação vistas em aula para avaliação\n"
      ],
      "metadata": {
        "id": "-4PK8s9OGYdm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Avaliação dos modelos usando K-Fold cross validation\n",
        "results = []\n",
        "names = []\n",
        "metrics = ['accuracy', 'precision', 'recall', 'f1']\n",
        "print(\"Model: Mean Score (Standard Deviation)\")\n",
        "for name, model in models:\n",
        "    kfold = KFold(n_splits=10, random_state=7, shuffle=True)\n",
        "    for metric in metrics:\n",
        "        if name in ['Logistic Regression', 'SVM']:  # Modelos que se beneficiam da normalização dos dados\n",
        "            cv_results = cross_val_score(model, X_train_scaled, y_train, cv=kfold, scoring=metric)\n",
        "        else:\n",
        "            cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring=metric)\n",
        "        results.append(cv_results)\n",
        "        names.append(name)\n",
        "        print(f\"{name} ({metric}): {cv_results.mean():.2f} \")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "834sTppPCT-K",
        "outputId": "7bfb17f7-dc0c-4a9b-e8a9-938e2e45afb3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: Mean Score (Standard Deviation)\n",
            "Logistic Regression (accuracy): 0.82 \n",
            "Logistic Regression (precision): 0.81 \n",
            "Logistic Regression (recall): 0.84 \n",
            "Logistic Regression (f1): 0.82 \n",
            "Decision Tree (accuracy): 0.89 \n",
            "Decision Tree (precision): 0.91 \n",
            "Decision Tree (recall): 0.86 \n",
            "Decision Tree (f1): 0.87 \n",
            "SVM (accuracy): 0.93 \n",
            "SVM (precision): 0.93 \n",
            "SVM (recall): 0.93 \n",
            "SVM (f1): 0.93 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.9) Com base nessas métricas, podemos concluir que o SVM é o algoritmo que obteve o melhor desempenho médio em todas as métricas avaliadas (acurácia, precisão, recall e F1-Score). O SVM apresentou as maiores médias em todas as métricas, indicando que teve um desempenho superior em relação à Regressão Logística e à Árvore de Decisão na classificação do problema em questão."
      ],
      "metadata": {
        "id": "1KKwWQIHF6Do"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.7) Após selecionar o melhor algoritmo com a ajuda da validação cruzada, treinei abaixo o\n",
        "modelo final usando todo o conjunto de treinamento disponível"
      ],
      "metadata": {
        "id": "0Ai1ixzRNOM-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# instancia o modelo\n",
        "best_model = LogisticRegression()\n",
        "\n",
        "# Treinando o modelo com os dados escalados\n",
        "best_model.fit(X_train_scaled, y_train)\n",
        "\n",
        "# Fazendo previsões com o modelo treinado usando o conjunto de teste escalado\n",
        "predictions = best_model.predict(X_test_scaled)\n",
        "\n",
        "# Avaliar a performance do modelo no conjunto de teste\n",
        "accuracy = accuracy_score(y_test, predictions)\n",
        "precision = precision_score(y_test, predictions)\n",
        "recall = recall_score(y_test, predictions)\n",
        "f1 = f1_score(y_test, predictions)\n",
        "conf_matrix = confusion_matrix(y_test, predictions)\n",
        "balanced_accuracy = balanced_accuracy_score(y_test, predictions)\n",
        "\n",
        "print(\"\\nPerformance no conjunto de teste\")\n",
        "print(f\"Acurácia: {accuracy:.3f}\")\n",
        "print(f\"Precision: {precision:.3f}\")\n",
        "print(f\"Recall: {recall:.3f}\")\n",
        "print(f\"F1-Score: {f1:.3f}\")\n",
        "print(f\"Acurácia Balanceada: {balanced_accuracy:.3f}\")\n",
        "\n",
        "print(\"\\nMatriz de Confusão:\")\n",
        "print(conf_matrix)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YXevouXMCXJl",
        "outputId": "466cc683-21ff-487e-8f86-cc7722d51da7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Performance no conjunto de teste\n",
            "Acurácia: 0.787\n",
            "Precision: 0.824\n",
            "Recall: 0.750\n",
            "F1-Score: 0.785\n",
            "Acurácia Balanceada: 0.788\n",
            "\n",
            "Matriz de Confusão:\n",
            "[[119  25]\n",
            " [ 39 117]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcular métricas de desempenho no conjunto de treinamento\n",
        "train_predictions = best_model.predict(X_train)\n",
        "train_accuracy = accuracy_score(y_train, train_predictions)\n",
        "train_precision = precision_score(y_train, train_predictions)\n",
        "train_recall = recall_score(y_train, train_predictions)\n",
        "train_f1 = f1_score(y_train, train_predictions)\n",
        "\n",
        "# Calcular métricas de desempenho no conjunto de teste\n",
        "test_accuracy = accuracy_score(y_test, predictions)\n",
        "test_precision = precision_score(y_test, predictions)\n",
        "test_recall = recall_score(y_test, predictions)\n",
        "test_f1 = f1_score(y_test, predictions)\n",
        "\n",
        "print(\"Métricas de desempenho no conjunto de treinamento:\")\n",
        "print(f\"Acurácia: {train_accuracy:.3f}\")\n",
        "print(f\"Precisão: {train_precision:.3f}\")\n",
        "print(f\"Recall: {train_recall:.3f}\")\n",
        "print(f\"F1-Score: {train_f1:.3f}\")\n",
        "\n",
        "print(\"\\nMétricas de desempenho no conjunto de teste:\")\n",
        "print(f\"Acurácia: {test_accuracy:.3f}\")\n",
        "print(f\"Precisão: {test_precision:.3f}\")\n",
        "print(f\"Recall: {test_recall:.3f}\")\n",
        "print(f\"F1-Score: {test_f1:.3f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_viEgfynsuKs",
        "outputId": "51007bf8-29cb-4f3d-c54e-10875d483688"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Métricas de desempenho no conjunto de treinamento:\n",
            "Acurácia: 0.783\n",
            "Precisão: 0.833\n",
            "Recall: 0.698\n",
            "F1-Score: 0.759\n",
            "\n",
            "Métricas de desempenho no conjunto de teste:\n",
            "Acurácia: 0.787\n",
            "Precisão: 0.824\n",
            "Recall: 0.750\n",
            "F1-Score: 0.785\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.10) Considerando essas métricas, não parece haver evidência clara de overfitting ou underfitting. As métricas de desempenho nos conjuntos de treinamento e teste são consistentes, o que sugere que o modelo está bem ajustado e é capaz de generalizar para dados não vistos de forma eficaz. No entanto, sempre é recomendável realizar mais investigações e análises para confirmar essa conclusão.\n",
        "Cristiane Pagine"
      ],
      "metadata": {
        "id": "fmEmIXdatX-6"
      }
    }
  ]
}